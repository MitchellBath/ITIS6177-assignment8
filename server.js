const express = require('express');
const app = express();
const port = 3000;

const swaggerJsdoc = require('swagger-jsdoc')
const swaggerUi = require('swagger-ui-express')
const cors = require('cors')

const options = {
    swaggerDefinition: {
        info: {
            title: 'Personal Budget API',
            version: '1.0.0',
            description: 'Personal Budget API autogenerated',    
        },
        host: '193.122.192.59:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
}

const specs = swaggerJsdoc(options)

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors())

const prices = {
    food: [
        {
            name: 'apple',
            price: 1,
        },
        {
            name: 'orange',
            price: 2,
        },
        {
            name: 'banana',
            price: 3,
        },
    ]
};


/**
 * @swagger
 * /price:
 *    get:
 *      description: Return all prices
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object food containing array of food prices
 */
app.get('/prices', (req, res) => {
    res.json(prices);
})

/**
 * @swagger
 * /price:
 *    post:
 *      description: Add a new food item with price
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object food containing array of food prices with new food and price
 */
app.post('/prices', (req, res) => {
	const item = req.body
	prices.food.push(item)
	res.json(prices)
})

/**
 * @swagger
 * /patch:
 *    get:
 *      description: Update the price of a food
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object food containing array of food prices with updated food price
 */
app.patch('/prices', (req, res) => {
	const {name} = req.params
	const {price} = req.body
	
	const index = prices.food.findIndex(fooditem => fooditem.name === name)
	if (index !== -1) {
		prices.food[index].price = price
		res.json(prices)
	} else {
		res.status(404).json({message: 'Food not found'})
	}
})

/**
 * @swagger
 * /price:
 *    put:
 *      description: Update the name of a food
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object food containing array of food prices with updated food name
 */
app.put('/prices', (req, res) => {
	const {name} = req.params
	const newname = req.body
	const index = prices.food.findIndex(fooditem => fooditem.name === name)
	if (index !== -1) {
		prices.food[index] = newname
		res.json(prices)
	} else {
		res.status(404).json({message: 'Food not found'})
	}
})

/**
 * @swagger
 * /price:
 *    delete:
 *      description: Delete a food
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object food containing array of food prices sans deleted food
 */
app.delete('/prices:food', (req, res) => {
	const name = req.params.food
	const index = prices.food.findIndex(fooditem => fooditem.name === name)
	if (index !== -1) {
		prices.food.splice(index, 1)
		res.json({message: `${name} deleted` })
	} else {
		res.status(404).json({message: 'Food not found'})
	}
})


app.listen(port, () => {
    console.log(`API served at http://193.122.192.59:${port}`);
})
